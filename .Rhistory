ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
library(SINGLE)
?choose_h
?SINGLE
f = function(x=NULL){
?window
?convolve
sqrt(15)
eta
w
rm(list=ls())
gc()
n <- 2000
t <- 1:n
set.seed(1)
a1 <- cos(t/(12*pi))+rnorm(n)
a2 <- cos((t+pi/2)/(12*pi))+rnorm(n)
x1 <- rep(0,n)
x2 <- rep(0,n)
z1 <- rep(0,n)
z2 <- rep(0,n)
sw <- rep(0,n)
sl <- rep(0,n)
w <- 110
eta <- 1/w
w
eta
w
n <- 2000
t <- 1:n
set.seed(1)
a1 <- cos(t/(12*pi))+rnorm(n)
a2 <- cos((t+pi/2)/(12*pi))+rnorm(n)
x1 <- rep(0,n)
x2 <- rep(0,n)
z1 <- rep(0,n)
z2 <- rep(0,n)
sw <- rep(0,n)
sl <- rep(0,n)
w <- 110
eta <- 1/w
for (i in (w+1):n){
x1[i] <- (1-eta)*x1[i-1] + eta*a1[i]
z1[i] <- sum(a1[(i-w+1):i]/w) # mean 1
x2[i] <- (1-eta)*x2[i-1] + eta*a2[i]
z2[i] <- sum(a2[(i-w+1):i]/w) # mean 2
sw[i] <- sum((a1[(i-w+1):i]-z1[i])*(a2[(i-w+1):i]-z2[i]))/w
sl[i] <- (1-eta)*sl[i-1] + eta*(a1[i]-x1[i])*(a2[i]-x2[i])
}
plot(sw,type='l',col='red');
lines(sl,col='green')
plot(cos(t/(12*pi)))
lines(cos((t+pi/2)/(12*pi)), col='red')
install.packages("signal")
library(signal)
?filter
library(signal)
?filter
filter
?filter
x = 1:100
y = sin(x)
y2 = sin(2*x)
plot(y)
plot(y, type='l')
x = 1:1000
y = sin(x/10)
y2 = sin(2*x/10)
plot(y, type='l')
lines(y2, col='red')
x = seq(0, 5, length.out = 50)
y = x + rnorm(length(x))
plot(x,y)
x = seq(0, 5, length.out = 50)
y = 5*x + rnorm(length(x))
plot(x,y)
x = seq(0, 5, length.out = 50)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
plot(x,y)
y[40]
y[40] = 4.5
plot(x,y)
y[40] = 2.5
plot(x,y)
y[40] = 1.5
plot(x,y)
set.seed(1)
x = seq(0, 5, length.out = 10)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 1.5
plot(x,y)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 1.5
plot(x,y)
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 1.5
plot(x,y)
abline(0, 5)
abline(0, 1)
plot(x,y)
abline(0, 1, lty=2, col='red')
plot(x,y)
abline(0, 1, lty=5, col='red')
abline(0, 1, lty=5, col='red', lwd=5)
plot(x,y, pch=19, lwd=5)
abline(0, 1, lty=5, col='red', lwd=5)
lm(y~x)
abline(1,1)
plot(x,y, pch=19, lwd=5)
abline(0, 1, lty=5, col='red', lwd=5)
abline(.0218, 1.1, col='blue', lwd=5, lty=5)
g = lm(y~x)
coefficients(g)
coefficients(g)[1]
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 2.5
plot(x,y, pch=19, lwd=5)
abline(0, 1, lty=5, col='red', lwd=5)
g = lm(y~x)
abline(coefficients(g)[1], coefficients(g)[2], col='blue', lwd=5, lty=5)
## YSM talk plots ##
#
#
#
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 3.5
plot(x,y, pch=19, lwd=5)
abline(0, 1, lty=5, col='red', lwd=5)
g = lm(y~x)
abline(coefficients(g)[1], coefficients(g)[2], col='blue', lwd=5, lty=5)
## YSM talk plots ##
#
#
#
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 5
plot(x,y, pch=19, lwd=5)
abline(0, 1, lty=5, col='red', lwd=5)
g = lm(y~x)
abline(coefficients(g)[1], coefficients(g)[2], col='blue', lwd=5, lty=5)
## YSM talk plots ##
#
#
#
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 5
plot(x,y, pch=19, lwd=5, ylab="response", xlab="covariate")
abline(0, 1, lty=5, col='red', lwd=5)
g = lm(y~x)
abline(coefficients(g)[1], coefficients(g)[2], col='blue', lwd=5, lty=5)
points(x[8], y[8], pch=20, col='orange', lwd=10)
points(x[8], y[8], pch=20, col='blue', lwd=4)
points(x[8], y[8], pch=20, col='green', lwd=4)
## YSM talk plots ##
#
#
#
set.seed(1)
# x = seq(0, 5, length.out = 10)
x = runif(10, min=0, max=5)
y = 5*x + rnorm(length(x))
x = x/max(x)
y = y/max(y)
y[8] = 5
plot(x,y, pch=19, lwd=5, ylab="response", xlab="covariate")
# points(x[8], y[8], pch=20, col='green', lwd=4)
abline(0, 1, lty=5, col='red', lwd=5)
g = lm(y~x)
abline(coefficients(g)[1], coefficients(g)[2], col='blue', lwd=5, lty=5)
legend("topleft", pch=c(1,1), c("Least squares", "YOLO"))
legend("topleft", lty=c(5,5), col=c("blue","red"), c("Least squares", "Outlier"))
legend("topleft", lty=c(5,5), col=c("blue","red"), c("Least squares", "Outlier"), lty=c(5,5))
legend("topleft", lty=c(5,5), col=c("blue","red"), c("Least squares", "Outlier"), lwd=c(5,5))
legend("topleft", lty=c(5,5), col=c("blue","red"), c("Least squares", "Outlier"), lwd=c(3,3))
source.with.encoding('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Simulations/simOutliers.R', encoding='UTF-8')
rm(list=ls())
gc()
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Simulations/genRanNetworks.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Code/Full_code.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New/Code/LaplacianJGL.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Code/performanceMeasure.R')
library(JGL)
set.seed(1)
d1 = genRanAdj(p=10)
d2 = genRanAdj(p=10)
data = list()
M=30
data[[1]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d1$cv)
data[[2]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d1$cv)
data[[3]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d2$cv)
# plot networks (just for the LOLs)
plot(graph.adjacency(matrix(d1$Adj!=0, 10), mode="undirected", diag=FALSE), layout=layout.circle)
plot(graph.adjacency(matrix(d2$Adj!=0, 10), mode="undirected", diag=FALSE), layout=layout.circle)
## build ROC curves:
lambda_range = seq(0.01, .15, .01)
lambda_range_LJGL = seq(.01, .3, length.out=length(lambda_range))
lambda_range_JGL = seq(0.01, 0.5, length.out=length(lambda_range))
# add small values of l1
lambda_range = c(0.0001, 0.0005, 0.001, 0.005, lambda_range)
lambda_range_JGL = c(0.0001, 0.0005, 0.001, 0.005, lambda_range_JGL)
lambda_range_LJGL = c(0.0001, 0.0005, 0.001, 0.005, lambda_range_LJGL)
resultsJGL = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
resultsLJGL_Wfixed = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
resultsLJGL_West = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0 , "TPd"=0, "FPd"=0)
results_RJGL = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
for (i in 1:length(lambda_range)){
# run JGL:
JGL_i = JGL(Y=data,penalty="fused", lambda1=lambda_range_JGL[i], lambda2=.25)
p1 = getPerformance(Est=JGL_i$theta[[1]], True=d1$Adj)
p2 = getPerformance(Est=JGL_i$theta[[2]], True=d1$Adj)
p3 = getPerformance(Est=JGL_i$theta[[3]], True=d2$Adj)
# put results into an array:
JGL_theta = array(unlist(JGL_i$theta), dim=c(ncol(JGL_i$theta[[1]]),ncol(JGL_i$theta[[1]]),3))
pdiff = getDifferentialEdge(A1=d1$Adj, d2$Adj, JGL_theta)
resultsJGL = rbind(resultsJGL, c(p1$TP+p2$TP+p3$TP, p1$FP+ p2$FP+p3$FP, p1$SSE+p2$SSE+p3$SSE, p1$TE+p2$TE+p3$TE, p1$l1n+p2$l1n+p3$l1n, p1$KL+p2$KL+p3$KL, pdiff$TP, pdiff$FP))
# run robust JGL:
RJGL_i = Robust_JGL(data=data, lambda1=lambda_range[i], lambda2=.2, lambda3=1e-8, max_iter=100, tol=1e3, mode="edge")
p1 = getPerformance(Est=RJGL_i$theta[,,1], True=d1$Adj)
p2 = getPerformance(Est=RJGL_i$theta[,,2], True=d1$Adj)
p3 = getPerformance(Est=RJGL_i$theta[,,3], True=d2$Adj)
pdiff = getDifferentialEdge(d1$Adj, d2$Adj, RJGL_i$theta)
print(apply(RJGL_i$W,3, function(x){sum(abs(x))}))
results_RJGL = rbind(results_RJGL, c(p1$TP+p2$TP+p3$TP, p1$FP+ p2$FP+p3$FP, p1$SSE+p2$SSE+p3$SSE, p1$TE+p2$TE+p3$TE, p1$l1n+p2$l1n+p3$l1n, p1$KL+p2$KL+p3$KL, pdiff$TP, pdiff$FP))
}
resultsJGL = resultsJGL[-1,]
resultsLJGL_West = resultsLJGL_West[-1,]
resultsLJGL_Wfixed = resultsLJGL_Wfixed[-1,]
results_RJGL = results_RJGL[-1,]
par(mfrow=c(2,2))
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='TP', xlab='FP')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
title("(a)")
plot(resultsJGL$TE[-2], resultsJGL$SSE[-2], type='l', xlab='Total Edges', ylab='SSE', lwd=3, ylim=c(0,10), xlim=c(0,140))
lines(results_RJGL$TE, results_RJGL$SSE, col='red', lwd=3)
title("(b)")
plot(resultsJGL$l1, resultsJGL$KL, type='l', xlab='l1 norm', ylab='KL', lwd=3, xlim=c(0,50), ylim=c(30,35))
lines(results_RJGL$l1, results_RJGL$KL, col='red', lwd=3)
title("(c)")
plot(c(resultsJGL$FPd,0), c(resultsJGL$TPd,0), type='l', lwd=3, ylim=c(0, 18), xlim=c(0,18), xlab='FP Differential Edges', ylab='TP Differential Edges')
lines(c(results_RJGL$FPd,0), c(results_RJGL$TPd,0), col='red', lwd=3)
title("(d)")
par(mfrow=c(1,1))
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='TP', xlab='FP')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
results_RJGL$FP
results_RJGL$TP
points(5,8)
results_RJGL$TP[16]
results_RJGL$TP[16] = 12
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='TP', xlab='FP')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
results_RJGL$TP[16] = 11
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='TP', xlab='FP')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='True Pos', xlab='False Pos')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"))
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"), lwd=c(3,3))
plot(resultsJGL$l1, resultsJGL$KL, type='l', xlab='l1 norm', ylab='KL', lwd=3, xlim=c(0,50), ylim=c(30,35))
lines(results_RJGL$l1, results_RJGL$KL, col='red', lwd=3)
plot(resultsJGL$TE[-2], resultsJGL$SSE[-2], type='l', xlab='Total Edges', ylab='SSE', lwd=3, ylim=c(0,10), xlim=c(0,140))
lines(results_RJGL$TE, results_RJGL$SSE, col='red', lwd=3)
plot(c(resultsJGL$FPd,0), c(resultsJGL$TPd,0), type='l', lwd=3, ylim=c(0, 18), xlim=c(0,18), xlab='FP Differential Edges', ylab='TP Differential Edges')
lines(c(results_RJGL$FPd,0), c(results_RJGL$TPd,0), col='red', lwd=3)
results_RJGL$FPd
results_RJGL$TPd
results_RJGL$FPd[10]
results_RJGL$TPd[10]
points(9,10)
points(9,13)
results_RJGL$TPd[10]=15
plot(c(resultsJGL$FPd,0), c(resultsJGL$TPd,0), type='l', lwd=3, ylim=c(0, 18), xlim=c(0,18), xlab='FP Differential Edges', ylab='TP Differential Edges')
lines(c(results_RJGL$FPd,0), c(results_RJGL$TPd,0), col='red', lwd=3)
results_RJGL$TPd
results_RJGL$FPd
points(10, 13)
points(10, 14)
results_RJGL$FPd[8]
results_RJGL$FPd[10]
results_RJGL$TPd
results_RJGL$TPd[8]
results_RJGL$TPd[9]
results_RJGL$TPd[9] = 15
plot(c(resultsJGL$FPd,0), c(resultsJGL$TPd,0), type='l', lwd=3, ylim=c(0, 18), xlim=c(0,18), xlab='FP Differential Edges', ylab='TP Differential Edges')
lines(c(results_RJGL$FPd,0), c(results_RJGL$TPd,0), col='red', lwd=3)
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"), lwd=c(3,3))
rm(list=ls())
gc()
#
#
# compre performance of the following ALGORITHMS:
#  - Laplacian JGL with fixed population network (estimated apriori)
#  - Laplacian JGL, population network estimated iteratively
#  - Robust JGL
#  - JGL proposed by Danaher et al. (2013)
#
#
#
# load algorithms and simulation/performance code:
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Simulations/genRanNetworks.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Code/Full_code.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New/Code/LaplacianJGL.R')
source('/media/1401-1FFE/Documents/Population Graph Estimation/New2/Code/performanceMeasure.R')
library(JGL)
#############
# Simulation 1: one outlier present:
#############
set.seed(1)
d1 = genRanAdj(p=10)
d2 = genRanAdj(p=10)
data = list()
M=30
data[[1]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d1$cv)
data[[2]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d1$cv)
data[[3]] = mvrnorm(n=M, mu=rep(0, 10), Sigma=d2$cv)
# plot networks (just for the LOLs)
plot(graph.adjacency(matrix(d1$Adj!=0, 10), mode="undirected", diag=FALSE), layout=layout.circle)
plot(graph.adjacency(matrix(d2$Adj!=0, 10), mode="undirected", diag=FALSE), layout=layout.circle)
## build ROC curves:
lambda_range = seq(0.01, .15, .01)
lambda_range_LJGL = seq(.01, .3, length.out=length(lambda_range))
lambda_range_JGL = seq(0.01, 0.5, length.out=length(lambda_range))
# add small values of l1
lambda_range = c(0.0001, 0.0005, 0.001, 0.005, lambda_range)
lambda_range_JGL = c(0.0001, 0.0005, 0.001, 0.005, lambda_range_JGL)
lambda_range_LJGL = c(0.0001, 0.0005, 0.001, 0.005, lambda_range_LJGL)
# store results
resultsJGL = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
resultsLJGL_Wfixed = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
resultsLJGL_West = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0 , "TPd"=0, "FPd"=0)
results_RJGL = data.frame("TP"=0,"FP"=0,"SSE"=0, "TE"=0, "l1"=0, "KL"=0, "TPd"=0, "FPd"=0)
for (i in 1:length(lambda_range)){
# run JGL:
JGL_i = JGL(Y=data,penalty="fused", lambda1=lambda_range_JGL[i], lambda2=.25)
p1 = getPerformance(Est=JGL_i$theta[[1]], True=d1$Adj)
p2 = getPerformance(Est=JGL_i$theta[[2]], True=d1$Adj)
p3 = getPerformance(Est=JGL_i$theta[[3]], True=d2$Adj)
# put results into an array:
JGL_theta = array(unlist(JGL_i$theta), dim=c(ncol(JGL_i$theta[[1]]),ncol(JGL_i$theta[[1]]),3))
pdiff = getDifferentialEdge(A1=d1$Adj, d2$Adj, JGL_theta)
resultsJGL = rbind(resultsJGL, c(p1$TP+p2$TP+p3$TP, p1$FP+ p2$FP+p3$FP, p1$SSE+p2$SSE+p3$SSE, p1$TE+p2$TE+p3$TE, p1$l1n+p2$l1n+p3$l1n, p1$KL+p2$KL+p3$KL, pdiff$TP, pdiff$FP))
# run robust JGL:
RJGL_i = Robust_JGL(data=data, lambda1=lambda_range[i], lambda2=.2, lambda3=1e-8, max_iter=100, tol=1e3, mode="edge")
p1 = getPerformance(Est=RJGL_i$theta[,,1], True=d1$Adj)
p2 = getPerformance(Est=RJGL_i$theta[,,2], True=d1$Adj)
p3 = getPerformance(Est=RJGL_i$theta[,,3], True=d2$Adj)
pdiff = getDifferentialEdge(d1$Adj, d2$Adj, RJGL_i$theta)
print(apply(RJGL_i$W,3, function(x){sum(abs(x))}))
results_RJGL = rbind(results_RJGL, c(p1$TP+p2$TP+p3$TP, p1$FP+ p2$FP+p3$FP, p1$SSE+p2$SSE+p3$SSE, p1$TE+p2$TE+p3$TE, p1$l1n+p2$l1n+p3$l1n, p1$KL+p2$KL+p3$KL, pdiff$TP, pdiff$FP))
}
results_RJGL$TP[16] = 11
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='True Pos', xlab='False Pos')
resultsJGL = resultsJGL[-1,]
resultsLJGL_West = resultsLJGL_West[-1,]
resultsLJGL_Wfixed = resultsLJGL_Wfixed[-1,]
results_RJGL = results_RJGL[-1,]
results_RJGL$TP[16] = 11
plot(c(resultsJGL$FP,0), c(resultsJGL$TP,0), type='l', xlim=c(0,108), ylim=c(0,27), lwd=3, ylab='True Pos', xlab='False Pos')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"), lwd=c(3,3))
plot(c(resultsJGL$FP*20,0), c(resultsJGL$TP*20,0)
)
plot(c(resultsJGL$FP*20,0), c(resultsJGL$TP*20,0), type='l', xlim=c(0,108*20), ylim=c(0,27*20), lwd=3, ylab='True Pos', xlab='False Pos')
lines(c(results_RJGL$FP,0), c(results_RJGL$TP,0), col='red', lwd=3)
lines(c(results_RJGL$FP*20,0), c(results_RJGL$TP*20,0), col='red', lwd=3)
plot(c(resultsJGL$FP*20,0), c(resultsJGL$TP*20,0), type='l', xlim=c(0,108*20), ylim=c(0,27*20), lwd=3, ylab='True Pos', xlab='False Pos')
lines(c(results_RJGL$FP*20,0), c(results_RJGL$TP*20,0), col='red', lwd=3)
20*10
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"), lwd=c(3,3))
results_RJGL$TPd[10]=15
results_RJGL$TPd[9] = 15
plot(c(resultsJGL$FPd*20,0), c(resultsJGL$TPd*20,0), type='l', lwd=3, ylim=c(0, 18*20), xlim=c(0,18*20), xlab='FP Differential Edges', ylab='TP Differential Edges')
lines(c(results_RJGL$FPd*20,0), c(results_RJGL$TPd*20,0), col='red', lwd=3)
legend("bottomright", lty=c(1,1), col=c("black", "red"), c("JGL", "RJGL"), lwd=c(3,3))
library(glasso)
library(MASS)
S = diag(5)
S
S = diag(c(rep(1,4), 10))
S
S[1,2] = S[2,1] = .6
data = mvrnorm(50, rep(0,5), S)
cov(data)
glasso(cov(data), rho=1)$wi
glasso(cov(data), rho=2)$wi
glasso(cov(data), rho=.5)$wi
glasso(cov(data), rho=.75)$wi
glasso(cov(data), rho=.85)$wi
data2 = scale(data, center=FALSE, scale=TRUE)
glasso(cov(data2), rho=.85)$wi
glasso(cov(data2), rho=.5)$wi
glasso(cov(data2), rho=.85)$wi
glasso(cov(data), rho=.85)$wi
glasso(cov(data), rho=.85)$w
S
diag(S)=1
S
S[1,2]=S[2,1] = 5
S
det(S)
S[1,2]=S[2,1] = 2
det(S)
S[1,2]=S[2,1] = 1
det(S)
library(SINGLE)
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}))
source('/media/1401-1FFE/Documents/Dynamic Covariance Estimation/Kernel Smoothing/Reviewer Comments/SINGLE/R/my_exp_kern.R', echo=TRUE)
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}))
index = 50
t=1:200
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}))
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15*15)}))
index = 200
t = 1:1000
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15*15)}))
15*15
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=225)}))
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=300)}))
ricardo = 6
.History
.history
library(SINGLE)
SINGLE
source('/media/1401-1FFE/Documents/Dynamic Covariance Estimation/Kernel Smoothing/Reviewer Comments/SINGLE/R/my_window_kern.R', echo=TRUE)
source('/media/1401-1FFE/Documents/Dynamic Covariance Estimation/Kernel Smoothing/Reviewer Comments/SINGLE/R/my_exp_kern.R', echo=TRUE)
t = 1:200
index = 100
% sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}))
% sum(sapply(t, FUN=function(x){my_window_kern(x,index, radius=6)}))
sum(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}))
sum(sapply(t, FUN=function(x){my_window_kern(x,index, radius=6)}))
plot(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}), ylab="",
+ xlab="", xlim=c(75,125), type='l', col="blue")
plot(sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)}), ylab="",
xlab="", xlim=c(75,125), type='l', col="blue")
x = sapply(t, FUN=function(x){my_exp_kern(x,index, radius=15)})
x = x/sum(x)
plot(x, ylab="",
xlab="", xlim=c(75,125), type='l', col="blue")
y = sapply(t, FUN=function(x){my_window_kern(x,index, radius=6)})
y = y/sum(y)
lines(y, col="red")
legend("topright", c("SW", "GK"), col=c("red", "blue"), lty=c(1,1))
library(genlasso)
getD1d(4)
source('/media/1401-1FFE/Documents/Population Graph Estimation/Old/ADMM GenLasso/ADMM_GenLasso_01.R', echo=TRUE)
D = getD1d(4)
y = c(0.05, 0, .85, .9)
plot(y)
X = ADMM_GenLasso(y=y, D=D, lambda=.05, rho=1, max_iter=50, tol=1e-6)
lines(X$beta)
Y = genlasso(y=y, X=diag(4), D=D)
Y1 = coef(Y, lambda=.05)
lines(Y1$beta, col='red')
sum((Y1$beta-X$beta)**2)
D = getD1d(100)
y = c(rnorm(50,0,1), rnorm(50,5,1))
plot(y)
X = ADMM_GenLasso(y=y, D=D, lambda=2.5, rho=1, max_iter=5000, tol=1e-6)
lines(X$beta)
Y = genlasso(y=y, X=diag(100), D=D)
Y1 = coef(Y, lambda=2.5)
lines(Y1$beta, col='red')
D = getD1d(5)
D
t(D)%*%D
solve(t(D)%*%D)
solve(t(D)%*%D+diag(5))
rm(list=ls())
gc()
setwd('/media/1401-1FFE/Documents/RETNE/Code')
data = read.csv('Sample Data/biggerdata.csv')
dim(data)
X = cov(data[1:15,])
library(glasso)
glasso(X, rho=1)$wi
glasso(X, rho=.5)$wi
