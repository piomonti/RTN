dinvSigma = -dn/((n-1)^2) * (invSigma - (1/gamma)*h) + n/(n-1) * (dinvSigma + dgamma/(gamma^2)*h - 1/gamma * dh)
invSigma = n/(n-1) * (invSigma - h/gamma)
logdetsigma = (p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma = (p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
# 	*Update sparse covariance estimate*
covariance[,,i+1] = Sigma
if (incremental==TRUE){
Sigma_glasso = glasso_iteration(Sigma_glasso, Sigma, rho=rho)$W
}
covariance_glasso[,,i+1] = Sigma_glasso
covariance_glasso_offline[,,i+1] = glasso(Sigma, rho=rho)$w
}
return(list(xbar=mu, cov=covariance, cov_glasso=covariance_glasso, cov_glasso_off=covariance_glasso_offline, C=Sigma, C_glasso=Sigma_glasso, l=lambda_track))
}
data = read.csv('biggerdata.csv')
dim(data)
X = GLASSO_AF_NLL(data = data, alpha = .01, rho = .1)
i
mu = dmu = matrix(0, nrow=ncol(data)) # mean (and its derivative)
S = matrix(1, ncol=ncol(data)) # keep track of variances
normalize_variance = t(sqrt(S)) %*% sqrt(S) # matrix with i,j entry equal to sigma_i * sigma_j - used to normalize covariance matricies
u = 0
vold = vnew = 0
delta = 1
Sigma = Pi = diag(1/delta, ncol(data)) # initial estimates of covariance (Pi is auxiliary parameter)
dSigma = dPi = matrix(0, ncol=ncol(data), nrow=ncol(data))
Sigma_glasso = glasso(Sigma, rho=rho)$w
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
covariance = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso_offline = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance[,,1] = Sigma
covariance_glasso[,,1] = glasso(Sigma, rho=rho)$w
covariance_glasso_offline[,,1] = glasso(Sigma, rho=rho)$w
rho=.1
alpha
alpha=.01
incremental=FALSE
## Simulation to compare MoG and JGL
mu = dmu = matrix(0, nrow=ncol(data)) # mean (and its derivative)
S = matrix(1, ncol=ncol(data)) # keep track of variances
normalize_variance = t(sqrt(S)) %*% sqrt(S) # matrix with i,j entry equal to sigma_i * sigma_j - used to normalize covariance matricies
u = 0
vold = vnew = 0
delta = 1
Sigma = Pi = diag(1/delta, ncol(data)) # initial estimates of covariance (Pi is auxiliary parameter)
dSigma = dPi = matrix(0, ncol=ncol(data), nrow=ncol(data))
Sigma_glasso = glasso(Sigma, rho=rho)$w
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
covariance = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso_offline = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance[,,1] = Sigma
covariance_glasso[,,1] = glasso(Sigma, rho=rho)$w
covariance_glasso_offline[,,1] = glasso(Sigma, rho=rho)$w
for (i in 1:nrow(data)){
#   *Update lambda*
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
#print(i)
#print(dJ)
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
#   *Update effective particles*
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
#dn = lambda*dn + oldn
#   *Update parameters (mean & covariance)*
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
#   *Update parameter derivatives*
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
#   *Update AUXILIARY parameters*
gamma = ((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
dgamma = dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
gamma = as.numeric(gamma)
dgamma = as.numeric(dgamma)
h = invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
dh_positive = dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma + invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_negative = -invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma - invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh = dh_positive + dh_negative
#   *Update invSigma, dinvSigma, logdetsigma & dlogdetsigma efficiently*
dinvSigma = -dn/((n-1)^2) * (invSigma - (1/gamma)*h) + n/(n-1) * (dinvSigma + dgamma/(gamma^2)*h - 1/gamma * dh)
invSigma = n/(n-1) * (invSigma - h/gamma)
logdetsigma = (p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma = (p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
# 	*Update sparse covariance estimate*
covariance[,,i+1] = Sigma
if (incremental==TRUE){
Sigma_glasso = glasso_iteration(Sigma_glasso, Sigma, rho=rho)$W
}
covariance_glasso[,,i+1] = Sigma_glasso
covariance_glasso_offline[,,i+1] = glasso(Sigma, rho=rho)$w
}
i
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
dJ
(-2*invSigma %*% dmu)
dinvSigma
mu
dinvSigma %*%(data[i,] - mu)
data[i,]
data[i,]-mu
class(data)
data = as.matrix(data)
X = GLASSO_AF_NLL()
X = GLASSO_AF_NLL(data = data, alpha = .01, rho = 0.1)
names(X)
plot(X$l)
plot(X$l, type='l')
X = GLASSO_AF_NLL(data = data, alpha = .001, rho = 0.1)
plot(X$l, type='l')
X = GLASSO_AF_NLL(data = data, alpha = .0025, rho = 0.1)
plot(X$l, type='l')
data = as.matrix(read.csv('SampleSubject.csv'))
dim(data)
X = GLASSO_AF_NLL(data = data, alpha = .001, rho = 0.1)
plot(X$l)
plot(X$l, type='l')
X = GLASSO_AF_NLL(data = data, alpha = .0025, rho = 0.1)
plot(X$l, type='l')
data[1,]
data = as.matrix(read.csv('biggerdata.csv'))
data[1,]
data[1,]%*%t(data[1,])
data[1,]
mu = rep(0,10)
mu
data-mu
data[1,]-mu
i=1
invSigma = identity(10)
invSigma
invSigma = diag(10)
invSigma
invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
invSigma[1,2] = .5
invSigma[2,1] = .5
invSigma
invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
n
n=300
((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
n=301
((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
dinvSigma
dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
i
mu
invSigma
dmu
dn
invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
dinvSigma
dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma + invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_negative = -invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma - invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh_negative
gamma
gamma = ((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
gamma
dgamma
dgamma = dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
dgamma
log(n-1
)
log(gamma)
logdetsigma
(p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma
(p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
dn
rm(list=ls())
gC()
gc()
data = as.matrix(read.csv('biggerdata.csv'))
library(lars)
library(glasso)
library(MASS)
lambda_fix = function(lambda){
if (lambda > 1){
new_lam = 1
} else if (lambda < 0.7){
new_lam = 0.7
} else {
new_lam = lambda
}
return(new_lam)
}
alpha = .01
rho=1
incremental=FALSE
data[1,]
i=1
mu = dmu = matrix(0, nrow=ncol(data)) # mean (and its derivative)
S = matrix(1, ncol=ncol(data)) # keep track of variances
normalize_variance = t(sqrt(S)) %*% sqrt(S) # matrix with i,j entry equal to sigma_i * sigma_j - used to normalize covariance matricies
u = 0
vold = vnew = 0
delta = 1
Sigma = Pi = diag(1/delta, ncol(data)) # initial estimates of covariance (Pi is auxiliary parameter)
dSigma = dPi = matrix(0, ncol=ncol(data), nrow=ncol(data))
Sigma_glasso = glasso(Sigma, rho=rho)$w
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
covariance = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso_offline = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance[,,1] = Sigma
covariance_glasso[,,1] = glasso(Sigma, rho=rho)$w
covariance_glasso_offline[,,1] = glasso(Sigma, rho=rho)$w
i
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
dJ
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
lambda
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
n
dn
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
mu
Pi
S
Sigma
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
dmu
dPi
alpha
data[i,]
mu = dmu = matrix(0, nrow=ncol(data)) # mean (and its derivative)
S = matrix(1, ncol=ncol(data)) # keep track of variances
normalize_variance = t(sqrt(S)) %*% sqrt(S) # matrix with i,j entry equal to sigma_i * sigma_j - used to normalize covariance matricies
u = 0
vold = vnew = 0
delta = 1
Sigma = Pi = diag(1/delta, ncol(data)) # initial estimates of covariance (Pi is auxiliary parameter)
dSigma = dPi = matrix(0, ncol=ncol(data), nrow=ncol(data))
Sigma_glasso = glasso(Sigma, rho=rho)$w
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
covariance = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso_offline = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance[,,1] = Sigma
covariance_glasso[,,1] = glasso(Sigma, rho=rho)$w
covariance_glasso_offline[,,1] = glasso(Sigma, rho=rho)$w
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
#print(i)
#print(dJ)
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
#   *Update effective particles*
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
#dn = lambda*dn + oldn
#   *Update parameters (mean & covariance)*
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
#   *Update parameter derivatives*
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
dPi
gamma = ((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
dgamma = dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
gamma = as.numeric(gamma)
dgamma = as.numeric(dgamma)
gamma
dgamma
dn* ((n^2)-1)/(n^2)
t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu)
2*t(data[i,] - mu) %*% invSigma %*% dmu
invSigma
dmu
dgamma
gamma
dmu
h = invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
h
dh_positive = dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma + invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_negative = -invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma - invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh = dh_positive + dh_negative
dh
dh_positive
dh_negative
dmu
invSigma %*% dmu
t(data[i,]-mu)%*% invSigma
invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma
invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh
dinvSigma = -dn/((n-1)^2) * (invSigma - (1/gamma)*h) + n/(n-1) * (dinvSigma + dgamma/(gamma^2)*h - 1/gamma * dh)
invSigma = n/(n-1) * (invSigma - h/gamma)
dinvSigma
invSigma
logdetsigma = (p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma = (p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
logdetsigma
dlogdetsigma
i
i=2
data[i,]
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
dJ
dlogdetsigma
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
lambda
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
n
dn
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
mu
Pi
i=1
mu = dmu = matrix(0, nrow=ncol(data)) # mean (and its derivative)
S = matrix(1, ncol=ncol(data)) # keep track of variances
normalize_variance = t(sqrt(S)) %*% sqrt(S) # matrix with i,j entry equal to sigma_i * sigma_j - used to normalize covariance matricies
u = 0
vold = vnew = 0
delta = 1
Sigma = Pi = diag(1/delta, ncol(data)) # initial estimates of covariance (Pi is auxiliary parameter)
dSigma = dPi = matrix(0, ncol=ncol(data), nrow=ncol(data))
Sigma_glasso = glasso(Sigma, rho=rho)$w
n = 1 #  effective sample size (ESS)
dn = 0 # derivative of ESS
lambda = lambda_track = 1 # forgetting factor (time varying)
invSigma = solve(Sigma)
dinvSigma = matrix(0, ncol=ncol(data), nrow=ncol(data))
logdetsigma = log(det(Sigma))
dlogdetsigma = 0
p = ncol(data)
covariance = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso = array(0, c(ncol(data), ncol(data), nrow(data)+1))
covariance_glasso_offline = array(0, c(ncol(data), ncol(data), nrow(data)+1))
i
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
#print(i)
#print(dJ)
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
#   *Update effective particles*
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
#dn = lambda*dn + oldn
#   *Update parameters (mean & covariance)*
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
#   *Update parameter derivatives*
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
#   *Update AUXILIARY parameters*
gamma = ((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
dgamma = dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
gamma = as.numeric(gamma)
dgamma = as.numeric(dgamma)
h = invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
dh_positive = dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma + invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_negative = -invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma - invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh = dh_positive + dh_negative
#   *Update invSigma, dinvSigma, logdetsigma & dlogdetsigma efficiently*
dinvSigma = -dn/((n-1)^2) * (invSigma - (1/gamma)*h) + n/(n-1) * (dinvSigma + dgamma/(gamma^2)*h - 1/gamma * dh)
invSigma = n/(n-1) * (invSigma - h/gamma)
logdetsigma = (p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma = (p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
i
i
i=2
dJ = 0.5*dlogdetsigma + 0.5*t(data[i,]-mu) %*% (-2*invSigma %*% dmu + dinvSigma %*%(data[i,] - mu))
#print(i)
#print(dJ)
lambda = lambda_fix(as.numeric(lambda - alpha*dJ))
lambda_track= c(lambda_track, lambda)
#   *Update effective particles*
oldn = n
n = lambda*n + 1
dn = lambda*dn + n
#dn = lambda*dn + oldn
#   *Update parameters (mean & covariance)*
oldmu = mu
oldPi = Pi
oldSigma = Sigma
mu = (1-(1/n))*mu + (1/n)*data[i,]
Pi = (1-(1/n))*Pi + (1/n)*data[i,]%*%t(data[i,])
Sigma = Pi - (mu %*% t(mu))
mu
Pi
Sigma
doldmu = dmu
doldPi = dPi
doldSigma = dSigma
dmu = (1-(1/n))*dmu - (dn/(n^2))*(data[i,]-oldmu)
dPi = (1-(1/n))*dPi - (dn/(n^2))*(data[i,]%*%t(data[i,]) - oldPi)
dSigma = dPi - dmu %*% t(mu) - mu %*% t(dmu)
dmu
dPi
dS
dSigma
gamma = ((n-1)^2)/n + t(data[i,] - mu) %*% invSigma %*% (data[i,] - mu)
dgamma = dn* ((n^2)-1)/(n^2)  + t(data[i,] - mu) %*% dinvSigma %*% (data[i,] - mu) - 2*t(data[i,] - mu) %*% invSigma %*% dmu
gamma
dgamma
gamma = as.numeric(gamma)
dgamma = as.numeric(dgamma)
h = invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% invSigma
dh_positive = dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma + invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_negative = -invSigma %*% dmu %*% t(data[i,]-mu)%*% invSigma - invSigma %*% (data[i,]-mu) %*% t(dmu) %*% invSigma
dh = dh_positive + dh_negative
h
dh_positive
dinvSigma %*% (data[i,] - mu) %*% t(data[i,] - mu) %*% invSigma
invSigma %*% (data[i,]-mu) %*% t(data[i,]-mu) %*% dinvSigma
dh_positive
dh_negative
dh
dinvSigma = -dn/((n-1)^2) * (invSigma - (1/gamma)*h) + n/(n-1) * (dinvSigma + dgamma/(gamma^2)*h - 1/gamma * dh)
invSigma = n/(n-1) * (invSigma - h/gamma)
logdetsigma = (p-2) * log(n-1) + (1-p)*log(n) + log(gamma) + logdetsigma
dlogdetsigma = (p-2)*dn/(n-1) + (1-p)*dn/n + dgamma/gamma+ dlogdetsigma
dinvSigma
invSigma
source('/media/1401-1FFE/Documents/Dynamic Covariance Estimation/Incremental GLASSO/Incremental_GLASSO_AF_GNLL.R')
X = GLASSO_AF_NLL(data = data, alpha = 0.01, rho = 1)
plot(X$l, type='l')
X = GLASSO_AF_NLL(data = data, alpha = 0.005, rho = 1)
plot(X$l, type='l')
