RJGL_i$iter
W1 = RJGL_i$W[,,1]
qplot(x=Var1, y=Var2, data=melt(W1), fill=value, geom="tile", main="Est Differences - Subject 1", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W2), fill=value, geom="tile", main="Est Differences - Subject 2", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
W1 = RJGL_i$W[,,1]
W2 = RJGL_i$W[,,2]
W3 = RJGL_i$W[,,3]
qplot(x=Var1, y=Var2, data=melt(W2), fill=value, geom="tile", main="Est Differences - Subject 2", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
p1 = qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
p2 = qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
grid.arrange(p1,p2, ncol=2)
W1 = RJGL_i$W[,,1]
W1 = W1 * (abs(W1) > .075)
W2 = RJGL_i$W[,,2]
W2 = W2 * (abs(W2) > .075)
W3 = RJGL_i$W[,,3]
W3 = W3 * (abs(W3) > .125)
p1 = qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
p2 = qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
grid.arrange(p1,p2, ncol=2)
qplot(x=Var1, y=Var2, data=melt(W1), fill=value, geom="tile", main="Est Differences - Subject 1", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W2), fill=value, geom="tile", main="Est Differences - Subject 2", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
W3 = RJGL_i$W[,,3]
qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
RJGL_i = Robust_JGL(data=data, lambda1=lambda_range[i], lambda2=.2, lambda3=1e-6, max_iter=100, tol=1e-2, mode="edge")
print(apply(RJGL_i$W,3, function(x){sum(abs(x))}))
W1 = RJGL_i$W[,,1]
W2 = RJGL_i$W[,,2]
W3 = RJGL_i$W[,,3]
qplot(x=Var1, y=Var2, data=melt(W1), fill=value, geom="tile", main="Est Differences - Subject 1", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W2), fill=value, geom="tile", main="Est Differences - Subject 2", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
p1 = qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
p2 = qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
grid.arrange(p1,p2, ncol=2)
W3 = W3 * (abs(W3) > .125)
p1 = qplot(x=Var1, y=Var2, data=melt(W3), fill=value, geom="tile", main="Est Differences - Subject 3", ylab="", xlab="") + scale_fill_gradient2(limits=range(c(aperm(RJGL_i$W))))
p2 = qplot(x=Var1, y=Var2, data=melt(d1$Adj - d2$Adj), fill=value, geom="tile", main="True Differences", ylab="", xlab="") + scale_fill_gradient2()
grid.arrange(p1,p2, ncol=2)
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
rm(list=ls())
gc()
library(glasso)
Sigma = diag(5)
Sigma[1,2]=Sigma[2,1] = .6
library(MASS)
data = mvrnorm(50, rep(0,5), Sigma)
cov(data)
glasso(cov(data), rho=1)$wi
glasso(cov(data), rho=.5)$wi
Sigma[1,1] = 5
Sigma
data2 = mvrnorm(50, rep(0,5), Sigma)
glass(cov(data2), rho=.5)$wi
glasso(cov(data2), rho=.5)$wi
glasso(cov(data), rho=.5)$wi
Sigma[4,5]=Sigma[5,4] = .6
Sigma = diag(5)
Sigma[1,2]=Sigma[2,1] = .6
Sigma[4,5]=Sigma[5,4] = .6
data = mvrnorm(50, rep(0,5), Sigma)
Sigma[1,1] = 5
data2 = mvrnorm(50, rep(0,5), Sigma)
glasso(cov(data), rho=.5)$wi
glasso(cov(data2), rho=.5)$wi
glasso(cor(data), rho=.5)$wi
glasso(cor(data2), rho=.5)$wi
glasso(cor(data), rho=.25)$wi
glasso(cor(data2), rho=.25)$wi
cov(data2)
cor(data2)
source('~/.active-rstudio-document', echo=TRUE)
X = solve(cov(data))
X1 = solve(cor(data))
det(X)
det(X1)
trace(cov(data)%*%X)
diag(cov(data)%*%X)
diag(cor(data)%*%X1)
g = "absbs"
g
"b" %in% G
"b" %in% g
rm(list=ls())
gc()
beta = seq(-5, 5, by=.01)
score = (y-beta)**2
l1 = 1
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2
plot(score)
plot(beta,score)
beta[which.min(score)]
plot(beta, score)
print(paste0("Best beta: ", beta[which.min(score)]))
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
plot(beta, score)
print(paste0("Best beta: ", beta[which.min(score)]))
l1/(l1+l2)
sign(1)
sign(-1)
max(0, abs(y)-l1)
l1
y
l1=.25
max(0, abs(y)-l1)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* sign(y-a)*max(0, abs(y-a)-l2)
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: " ebeta))
ebeta
print(paste0("Estimated beta: ", ebeta))
l1
l1=1
l1 = 1
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* sign(y-a)*max(0, abs(y-a)-l2)
plot(beta, score)
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: ", ebeta))
plot(beta, score, type='l')
score = (y-beta)**2
plot(beta, score, type='l')
score = (y-beta)**2 + l1*abs(beta)
plot(beta, score, type='l')
l1 = 0
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* sign(y-a)*max(0, abs(y-a)-l2)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: ", ebeta))
a
l1 = 0
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: ", ebeta))
l1 = 1
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: ", ebeta))
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l1/(l1+l2))*l2
adjl1
adjl2
2/3
l2
ebeta2 = sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
ebeta2
beta[which.min(score)]
beta+ebeta
ebeta+ebeta2
(ebeta+ebeta2)/2
ebeta
ebeta2
l1 = 1
l2 = 2
y = .5
a = 1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l2/(l1+l2))*l2
ebeta2 = sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
ebeta3 = (l1/(l1+l2)) * sign(y)*max(0, abs(y)-adjl1) + (l2/(l1+l2)) * (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
print(paste0("Estimated beta: ", ebeta))
ebeta2
ebeta3
adjl1
adjl2
plot(beta, l1*abs(beta) + l2*abs(beta-a))
abline(v=1.25)
abline(h=1.25)
abline(h=2)
abline(h=2*1.25)
a=-1
plot(beta, l1*abs(beta) + l2*abs(beta-a))
abline(h=2*1.25)
a
abline(h=2*a*-1)
l1
l2
l2 = .5
a=1.25
plot(beta, l1*abs(beta) + l2*abs(beta-a))
abline(h=2*a)
abline(h=l2*a)
l2
l1*a
abline(h=l1*a)
l1 = 1
l2 = .5
y = .5
a = -1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l2/(l1+l2))*l2
ebeta2 = sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
ebeta3 = (l1/(l1+l2)) * sign(y)*max(0, abs(y)-adjl1) + (l2/(l1+l2)) * (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
plot(beta, score, type='l')
l1 = 1
l2 = .75
y = .5
a = -1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
l1 = 1
l2 = 1.75
y = .5
a = -1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
l1 = 1
l2 = 2.75
y = .5
a = -1.25
beta = seq(-5, 5, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
beta = seq(-2, 2, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
y
l1 = 1
l2 = 2.75
y = .5
a = 1.25
beta = seq(-2, 2, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
l1 = 1
l2 = 2.75
y = .5
a = 0.25
beta = seq(-2, 2, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
l1 = 1
l2 = 0.75
y = .5
a = 0.25
beta = seq(-2, 2, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
l1 = 1
l2 = 0.75
y = .5
a = 0.75
beta = seq(-2, 2, by=.01)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l2/(l1+l2))*l2
l1
l2
adjl1
adjl2
ebeta2 = sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
ebeta2
ebeta2 = (sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a))/2
ebeta2
beta = seq(-2, 2, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l2/(l1+l2))*l2
ebeta2 = (sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a))/2
print(paste0("Estimated beta: ", ebeta2))
l1 = 1
l2 = 0.75
y = .5
a = 0.85
beta = seq(-2, 2, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
adjl1 = (l1/(l1+l2))*l1
adjl2 = (l2/(l1+l2))*l2
ebeta2 = (sign(y)*max(0, abs(y)-adjl1) + (sign(y-a)*max(0, abs(y-a)-adjl2)+a))/2
print(paste0("Estimated beta: ", ebeta2))
y
a
y-a
ebeta3 = (l1/(l1+l2)) * sign(y)*max(0, abs(y)-adjl1) + (l2/(l1+l2)) * (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
print(paste0("Estimated beta: ", ebeta3))
print(paste0("Best beta: ", beta[which.min(score)]))
(sign(y-a)*max(0, abs(y-a)-adjl2)+a)
sign(y)*max(0, abs(y)-adjl1)
(l2/(l1+l2)) * (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
y-a
sign(y-a)
max(0, abs(y-a)-adjl2)+a)
max(0, abs(y-a)-adjl2)+a
sign(y-a)
l1
l2
(l2/(l1+l2)) * (sign(y-a)*max(0, abs(y-a)-adjl2)+a)
l1 = 1
l2 = 0.75
y = .5
a = 0.85
beta = seq(-2, 2, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
score_nol1 = (y-beta)**2 + l2*abs(beta-a)
lines(beta, score_nol1, col='red')
beta[which.min(score_nol1)]
print(paste0("Best beta: ", beta[which.min(score)]))
l1
l1/(l1+l2)
.85 - l1/(l1+l2)
l1
l2
l2/l1
l1/l2
.375/.85
plot(score-score_nol1)
plot(score-score_nol1, type='l')
l1 = 1
l2 = 3.75
y = .5
a = 0.85
beta = seq(-2, 2, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
l1 = 1
l2 = 3.75
y = .5
a = -0.85
beta = seq(-2, 2, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
min(1,2,3)
LB = min(0, a, y)
UP = max(0, a, y)
beta = seq(LB, UP, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
LB
UP
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
l1 = 1
l2 = .75
y = .5
a = -0.85
LB = min(0, a, y)
UP = max(0, a, y)
beta = seq(LB, UP, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
l1 = 3
l2 = .75
y = .5
a = -0.85
LB = min(0, a, y)
UP = max(0, a, y)
beta = seq(LB, UP, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
l1 = 30
l2 = .75
l1 = .05
l2 = .75
y = .5
a = -0.85
LB = min(0, a, y)
UP = max(0, a, y)
beta = seq(LB, UP, by=.001)
score = (y-beta)**2 + l1*abs(beta) + l2*abs(beta-a)
ebeta = (l1/(l1+l2))* sign(y)*max(0, abs(y)-l1) + (l2/(l1+l2))* (sign(y-a)*max(0, abs(y-a)-l2)+a)
plot(beta, score, type='l')
print(paste0("Best beta: ", beta[which.min(score)]))
abline(v=beta[which.min(score)])
rm(list=ls())
gC()
setwd('/media/1401-1FFE/Documents/RETNE/Code/Sample Data/')
data = read.csv('biggerdata.csv')
dim(data)
X = data[1:100,]
dim(X)
t(X)%*% X
X %*% t(X)
class(X)
data = as.matrix(data)
X = data[1:100,]
t(X)%*% X
head(data)
cov(X)
dim(X)
X[100,]
numpy.
cov
cov(data[101:200,])
cov(X)
solve(cov(data[101:200,]))
solve(cov(X))
glasso(cov(X), rho=1)$wi
library(glasso)
glasso(cov(X), rho=1)$wi
glasso(cov(X), rho=.5)$wi
glasso(cov(X), rho=.25)$wi
dim(X)
apply(data[1:100,], 2, mean)
(1/100) * t(data[1:100,])%*%data[1:100,]
(1/99) * t(data[1:100,])%*%data[1:100,]
(1/101) * t(data[1:100,])%*%data[1:100,]
(1/102) * t(data[1:100,])%*%data[1:100,]
(1/99) * t(data[1:100,])%*%data[1:100,]
plot(data[,1])
mean(data[101:200,1])
plot(data[,2])
plot(data[,3])
plot(data[,4])
plot(data[,5])
plot(data[,6])
plot(data[,7])
plot(data[,8])
plot(data[,9])
plot(data[,10])
plot(data[,1])
mean(data[80:110,1])
mean(data[80:100,1])
